//
// Example application level use of Flatbuffers with WAMP.
//

/// We only need "uri" and "Void" (maybe move that elsewhere?)
//include "wamp.fbs";

attribute "uri";
attribute "uuid";
attribute "type";
attribute "stream";

namespace wamp;
table Void {}


namespace com.example.accelstorage;


/// One sample from accelerometer sensor.
struct AccelSample
{
    x: float;
    y: float;
    z: float;
}


/// A series of samples from the accelerometer sensor.
table AccelSeries
{
    /// Unix epoch when sample batch was recorded (start thereof).
    sample_start: uint64;

    /// Sample length in ms.
    sample_period: uint16;

    /// Sample batch with accelerometer readings.
    samples: [AccelSample];
}


/// A time range.
table TimeRange
{
    /// Unix epoch start time or 0 for infinity into the past.
    start: uint64;

    /// Unix epoch end time or 0 for infinity into the future.
    endof: uint64;
}


/// A batch of sample series.
table AccelBatch
{
    series: [AccelSeries];
}


/// Define an interface for accelerometer storage services.
rpc_service AccelStorage (type: "interface", uuid: "4b740947-31d5-4a10-b7ce-4149bbc9ee1e")
{
    //
    // Examples of basic WAMP RPC and PubSub interface declarations
    //

    /// Procedure to store a series of samples. The time range of
    /// samples stored is returned.
    store (AccelSeries): TimeRange (type: "procedure");

    /// Procedure that returns the last series of samples stored
    // within the given time range.
    get_last (TimeRange): AccelSeries (type: "procedure");

    /// Event fired when a sample batch was stored. The time range
    /// of the stored samples is provided as event payload.
    on_store (TimeRange): wamp.Void (type: "topic");

    //
    // Examples of **streaming return and/or argument** WAMP procedure declarations
    //

    /// Fetch all sample series within the given time range as one batch.
    fetch_batch (TimeRange): AccelBatch (type: "procedure", stream: "none");

    /// Fetch all sample series within the given time range.
    /// Sample series are returned as streaming, "progressive results".
    fetch_stream (TimeRange): AccelSeries (type: "procedure", stream: "return");

    /// Bulk upload sample batches.
    store_batch (AccelBatch): TimeRange (type: "procedure", stream: "none");

    /// Bulk upload sample batches.
    /// Sample batches are provided as streaming, "progressive call arguments"
    store_stream (AccelSeries): TimeRange (type: "procedure", stream: "argument");

    /// Compute sliding window average of sample using bulk transformation
    /// of batches of samples.
    average_batch (AccelBatch): AccelBatch (type: "procedure", stream: "none");

    /// Compute sliding window average of sample using a streaming transformation
    /// receiving arguments and producing results in a full duplex stream.
    average_stream (AccelSeries): AccelSeries (type: "procedure", stream: "both");

    //
    // Examples of **event subscriber replies** WAMP topic declarations
    //

    /// Ice cream surveys are published as events on this topic.
    on_new_icecream_survey (IceCreamOfTheDaySurvey): IceCreamOfTheDayReply (type: "topic");
}



/// Gender (simplified).
enum Gender: uint8
{
    UNSET,
    MALE,
    FEMALE,
}


/// Ice cream surveys.
table IceCreamOfTheDaySurvey
{
    expires: uint64;
}


/// Replies to ice cream surveys.
table IceCreamOfTheDayReply
{
    my_age: uint16;
    my_gender: Gender;
    my_hashed_email: [uint8];
    i_like_lemon: bool;
    i_like_strawberry: bool;
    i_like_chocolate: bool;
}


/// 
rpc_service IceCreamSurvey (type: "interface", uuid: "7e2c99b7-7506-477f-b782-7266a9e76126")
{
    //
    // Examples of **event subscriber replies** WAMP topic declarations
    //

    /// Ice cream surveys are published as events on this topic.
    on_new_survey (IceCreamOfTheDaySurvey): IceCreamOfTheDayReply (type: "topic");
}
